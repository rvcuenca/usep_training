read.csv(file = "data/Tubo-USEP_One-Way Cleaned Data for R.csv")
# Load and save
oneway_data <- read_csv(file = "data/Tubo-USEP_One-Way Cleaned Data for R.csv")
# Package needed
# Load and save
oneway_data <- tidyverse::read_csv(file = "data/Tubo-USEP_One-Way Cleaned Data for R.csv")
library(tidyverse)
# Load and save
oneway_data <- read_csv(file = "data/Tubo-USEP_One-Way Cleaned Data for R.csv")
# Preview
oneway_data
# Load and save
oneway_data <- read_csv(file = "data/Tubo-USEP_One-Way Cleaned Data for R.csv")
# Preview
oneway_data
oneway_data
oneway_data %>%
gather(key = "Type", value = "Sales")
oneway_data
oneway_data %>%
gather(key = "Type", value = "Sales", -Observation)
oneway_data %>%
gather(key = "Type", value = "Sales", -Observation) %>%
mutate(across(Observation:Type, ~as_factor(.x)))
oneway_data %>%
gather(key = "Type", value = "Sales", -Observation) %>%
mutate(across(c(Observation,Sales), ~as_factor(.x)))
oneway_data %>%
gather(key = "Type", value = "Sales", -Observation) %>%
mutate(across(c(Observation,Sales), ~as_factor(.x)))
oneway_data %>%
gather(key = "Type", value = "Sales", -Observation) %>%
# mutate(across(c(Observation,Type), ~as_factor(.x)))
mutate(across(Observation:Type, ~as_factor(.x))
oneway_data %>%
gather(key = "Type", value = "Sales", -Observation) %>%
# mutate(across(c(Observation,Type), ~as_factor(.x)))
mutate(across(Observation:Type, ~as_factor(.x)))
oneway_data %>%
gather(key = "Type", value = "Sales", -Observation) %>%
# mutate(across(c(Observation,Type), ~as_factor(.x)))
mutate(across(Observation:Type, ~as_factor(.x))) -> clean_oneway_data
oneway_data %>%
gather(key = "Type", value = "Sales", -Observation) %>%
# mutate(across(c(Observation,Type), ~as_factor(.x)))
mutate(across(Observation:Type, ~as_factor(.x))) -> clean_oneway_data
clean_oneway_data
clean_oneway_data$Type
levels(clean_oneway_data$Type)
`levels<-.factor`(clean_oneway_data$Type)
clean_oneway_data$Type
clean_oneway_data
clean_oneway_data %>%
group_by(Type) %>%
group_split
clean_oneway_data %>%
group_by(Type) %>%
group_split %>%
purrr::map(~ {
.x %>%
"$"(Sales) %>%
shapiro.test(.)
})
clean_oneway_data %>%
group_by(Type) %>%
group_split
clean_oneway_data %>%
group_by(Type) %>%
group_split %>%
"[["(1)
clean_oneway_data %>%
group_by(Type) %>%
group_split %>%
"[["(1) %>%
"$"(Type)
clean_oneway_data %>%
group_by(Type) %>%
group_split %>%
"[["(1) %>%
"$"(Type) %>%
unique
clean_oneway_data %>%
group_by(Type) %>%
group_split %>%
"[["(1) %>%
"$"(Type) %>%
names
clean_oneway_data %>%
group_by(Type) %>%
group_split %>%
purrr::map(~ {
.x %>%
"$"(Sales) %>%
shapiro.test
})
clean_oneway_data %>%
group_by(Type) %>%
group_split %>%
purrr::map(~ {
.x %>%
"$"(Sales) %>%
shapiro.test %>%
str
})
clean_oneway_data %>%
group_by(Type) %>%
group_split %>%
purrr::map(~ {
.x %>%
"$"(Sales) %>%
shapiro.test %>%
"$"(p.value)
})
clean_oneway_data %>%
group_by(Type) %>%
group_split %>%
purrr::map(~ {
.x %>%
"$"(Sales) %>%
shapiro.test
# %>%
#   "$"(p.value)
})
clean_oneway_data %>%
group_by(Type) %>%
group_split %>%
purrr::map(~ {
.x %>%
"$"(Sales) %>%
shapiro.test  %>%
as_tibble()
})
clean_oneway_data %>%
group_by(Type) %>%
group_split %>%
purrr::map(~ {
.x %>%
"$"(Sales) %>%
shapiro.test  %>%
"["(1:2)
})
clean_oneway_data %>%
group_by(Type) %>%
group_split %>%
purrr::map(~ {
.x %>%
"$"(Sales) %>%
shapiro.test  %>%
unlist
})
clean_oneway_data %>%
group_by(Type) %>%
group_split %>%
purrr::map(~ {
.x %>%
"$"(Type)
# .x %>%
#   "$"(Sales) %>%
#   shapiro.test  %>%
#   unlist
})
clean_oneway_data %>%
group_by(Type) %>%
group_split %>%
purrr::map(~ {
.x %>%
"$"(Type)
# .x %>%
#   "$"(Sales) %>%
#   shapiro.test  %>%
#   unlist
})
clean_oneway_data %>%
group_by(Type) %>%
group_split %>%
purrr::map(~ {
.x %>%
"$"(Type) %>%
"["(1)
# .x %>%
#   "$"(Sales) %>%
#   shapiro.test  %>%
#   unlist
})
clean_oneway_data %>%
group_by(Type) %>%
group_split %>%
purrr::map(~ {
.x$Type
# .x %>%
#   "$"(Sales) %>%
#   shapiro.test  %>%
#   unlist
})
clean_oneway_data %>%
group_by(Type) %>%
group_split %>%
purrr::map(~ {
.x$Sales %>%
shapiro.test
})
clean_oneway_data %>%
group_by(Type) %>%
group_split %>%
purrr::map(~ {
.x$Sales %>%
shapiro.test(data.name = unique(.x$Type))
})
clean_oneway_data %>%
group_by(Type) %>%
group_split %>%
purrr::map(~ {
.x$Sales %>%
shapiro.test(data.name = unique(.x$Type))
})
clean_oneway_data %>%
group_by(Type) %>%
group_split %>%
purrr::map(~ {
.x$Sales %>%
shapiro.test(data.name = .x$Type)
})
clean_oneway_data %>%
group_by(Type) %>%
group_split %>%
purrr::map(~ {
.x$Sales %>%
shapiro.test(data.name = ".x$Type")
})
clean_oneway_data %>%
group_by(Type) %>%
group_split %>%
purrr::map(~ {
.x$Sales %>%
shapiro.test(data.name = "hmm")
})
clean_oneway_data %>%
group_by(Type) %>%
group_split %>%
purrr::map(~ {
.x$Sales %>%
shapiro.test
})
clean_oneway_data %>%
group_by(Type) %>%
group_split
clean_oneway_data %>%
group_by(Type) %>%
group_map(~{
.x$Sales %>%
shapiro.test
})
# group_split() %>%
# purrr::map(~ {
#   .x$Sales %>%
#     shapiro.test
# })
clean_oneway_data %>%
group_by(Type) %>%
group_map(~shapiro.test(.x$Sales))
clean_oneway_data %>%
group_by(Type) %>%
group_map(~shapiro.test(.x$Sales))
clean_oneway_data %>%
group_by(Type) %>%
group_map(~shapiro.test(.x$Sales))
clean_oneway_data %>%
group_by(Type) %>%
group_map(~shapiro.test(.x$Sales)) %>%
setNames(levels(clean_oneway_data$Type))
clean_oneway_data %>%
group_by(Type) %>%
group_map(~ {
shapiro.test(.x$Sales) %>%
unlist %>%
as_tibble
})
clean_oneway_data %>%
group_by(Type) %>%
group_map(~ {
shapiro.test(.x$Sales) %>%
unlist
# %>%
#   as_tibble
})
clean_oneway_data %>%
group_by(Type) %>%
group_map(~ {
shapiro.test(.x$Sales) %>%
unlist %>%
tibble
})
clean_oneway_data %>%
group_by(Type) %>%
group_map(~ {
shapiro.test(.x$Sales) %>%
unlist %>%
bind_rows()
})
clean_oneway_data %>%
group_by(Type) %>%
group_map(~ {
shapiro.test(.x$Sales) %>%
unlist %>%
bind_rows
}) %>%
mutate(data.name=levels(clean_oneway_data$Type))
clean_oneway_data %>%
group_by(Type) %>%
group_map(~ {
shapiro.test(.x$Sales) %>%
unlist %>%
bind_rows
}) %>%
bind_rows
clean_oneway_data %>%
group_by(Type) %>%
group_map(~ {
shapiro.test(.x$Sales) %>%
unlist %>%
bind_rows
}) %>%
bind_rows %>%
mutate(data.name=levels(clean_oneway_data$Type))
clean_oneway_data %>%
group_by(Type) %>%
group_map(~ {
shapiro.test(.x$Sales) %>%
unlist %>%
bind_rows
}) %>%
bind_rows %>%
mutate(data.name=levels(clean_oneway_data$Type)) %>%
knitr::kable(.)
clean_oneway_data %>%
group_by(Type) %>%
group_map(~ {
shapiro.test(.x$Sales) %>%
unlist %>%
bind_rows
}) %>%
bind_rows %>%
mutate(data.name=levels(clean_oneway_data$Type))
clean_oneway_data %>%
ggplot(aes(sample = Sales, color = Type))
clean_oneway_data %>%
ggplot(aes(sample = Sales, color = Type)) +
stat_qq()
clean_oneway_data %>%
ggplot(aes(sample = Sales, color = Type)) +
stat_qq() +
stat_qq_line()
plot(one_aov,3)
library(tidyverse)
library(ggpubr)
library(multcomp)
# Load and save
oneway_data <- read_csv(file = "data/Tubo-USEP_One-Way Cleaned Data for R.csv")
# Preview
oneway_data
oneway_data %>%
gather(key = "Type", value = "Sales", -Observation) %>%
# mutate(across(c(Observation,Type), ~as_factor(.x)))
mutate(across(Observation:Type, ~as_factor(.x))) -> clean_oneway_data
clean_oneway_data
levels(clean_oneway_data$Type)
clean_oneway_data %>%
ggboxplot(x = "Type", y = 'Sales',
fill = "Type",
palette = c("white", "pink", "orange", "green")) +
theme(legend.position = "none")
one_aov <- clean_oneway_data %>%
aov(formula = Sales ~ Type, data = .)
one_aov %>%
summary
pf(q = 10.49, df1 = 3, df2 = 16, lower.tail = F)
oneway_data[-1,] %>%
rstatix::shapiro_test(Colorless,Pink,Orange,Green)
shapiro.test(residuals(object = one_aov))
clean_oneway_data %>%
mutate(Residual = one_aov$residuals) %>%
ggplot(aes(sample = Residual)) +
stat_qq() +
stat_qq_line() +
facet_wrap(~Type)
plot(one_aov,2)
clean_oneway_data %>%
ggplot(aes(x = Sales)) +
geom_histogram(bins = 30, color = "white") +
geom_density() +
facet_wrap(~Type)
clean_oneway_data %>%
bartlett.test(Sales ~ Type, data = .)
clean_oneway_data %>%
ggboxplot(x = "Type", y = 'Sales',
fill = "Type",
palette = c("white", "pink", "orange", "green")) +
theme(legend.position = "none")
plot(one_aov,1, las=1)
plot(one_aov,3)
TukeyHSD(one_aov)
cat("Avg. Sales Comparison\t P-value (adjusted)\n---------------------------------------------\nGreen > Colorless\t 0.0034923\nGreen > Orange\t\t 0.0005837\nOrange > Pink\t\t 0.0281177\n---------------------------------------------\n")
summary(glht(one_aov, linfct = mcp(Type = "Tukey")))
# Load and save
twoway_data <- read_csv(file = "data/Tubo-USEP_Two-Way Cleaned Data for R.csv")
# Preview
twoway_data
twoway_data%>%
gather(key = Plot, value = Yield, -c(Fertilizer,Manure)) %>%
mutate(across(Fertilizer:Plot, ~ as.factor(.x))) -> clean_twoway_data
clean_twoway_data
ggboxplot(clean_twoway_data,
x = "Fertilizer",
y = "Yield",
fill = "Manure")
two_aov <- clean_twoway_data %>%
aov(formula = Yield ~ Fertilizer + Manure, data = .)
two_aov %>%
summary
pf(q = 6.332, df1 = 1, df2 = 17, lower.tail = F)
pf(q = 6.883, df1 = 1, df2 = 17, lower.tail = F)
shapiro.test(residuals(two_aov))
oneway_data$Colorless %>% ks.test(y = pnorm(mean = mean(.), sd = sd(.), q=.))
plot(two_aov, 2)
clean_oneway_data %>%
bartlett.test(Sales ~ Type, data = .)
clean_oneway_data %>%
ggboxplot(x = "Type", y = 'Sales',
fill = "Type",
palette = c("white", "pink", "orange", "green")) +
theme(legend.position = "none")
plot(one_aov,1, las=1)
plot(one_aov,3)
clean_twoway_data %>%
bartlett.test(Yield ~ Fertilizer + Manure, data = .)
clean_twoway_data %>%
{
bartlett.test(Yield ~ Fertilizer, data = .x) %>% print
bartlett.test(Yield ~ Manure, data = .x)
}
clean_twoway_data %>%
{
bartlett.test(Yield ~ Fertilizer, data = .) %>% print
bartlett.test(Yield ~ Manure, data = .)
}
clean_twoway_data %>%
{
bartlett.test(Yield ~ Fertilizer, data = .)
bartlett.test(Yield ~ Manure, data = .)
}
clean_twoway_data %>%
{
bartlett.test(Yield ~ Fertilizer, data = .) %>% print
bartlett.test(Yield ~ Manure, data = .)
}
clean_twoway_data %>%
{
bartlett.test(Yield ~ Fertilizer, data = .) %>% print
bartlett.test(Yield ~ Manure, data = .) %>% print
bartlett.test(Yield ~ c(Fertilizer,Manure), data = .)
}
clean_twoway_data
clean_twoway_data %>%
{
bartlett.test(Yield ~ Fertilizer, data = .) %>% print
bartlett.test(Yield ~ Manure, data = .) %>% print
bartlett.test(Yield ~ Fertilizer:Manure, data = .)
}
clean_twoway_data
two_aov2 <- clean_twoway_data %>%
aov(formula = Yield ~ Fertilizer + Manure, data = .)
two_aov2 %>%
summary
two_aov2 <- clean_twoway_data %>%
aov(formula = Yield ~ Fertilizer*Manure, data = .)
two_aov2 %>%
summary
shapiro.test(residuals(two_aov))
plot(two_aov, 2)
par(mfrow=c(2,2))
plot(two_aov)
par(mfrow=c(1,1))
twoway_data
twoway_data %>%
str
levels(clean_twoway_data$Manure)
levels(clean_twoway_data$Fertilizer)
twoway_data %>%
TukeyHSD()
two_aov %>%
TukeyHSD()
two_aov2 %>%
TukeyHSD()
two_aov %>%
TukeyHSD()
TukeyHSD(two_aov)
ggline(clean_twoway_data,
x = "Fertilizer",
y = "Yield",
color = "Manure",
add = c("mean_se"))
str(clean_twoway_data)
clean_twoway_data %>%
sample_n(10)
str(clean_oneway_data)
sample_n(10)
str(clean_oneway_data)
clean_oneway_data %>%
sample_n(10)
